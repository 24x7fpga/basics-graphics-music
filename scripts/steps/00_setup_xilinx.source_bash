expected_source_script=00_setup.source_bash

if [ -z "$BASH_SOURCE" ]
then
    printf "script \"$0\" should be sourced from $expected_source_script\n" 1>&2
    exit 1
fi

this_script=$(basename "${BASH_SOURCE[0]}")
source_script=$(basename "${BASH_SOURCE[1]}")

if [ -z "$source_script" ]
then
    printf "script \"$this_script\" should be sourced from $expected_source_script\n" 1>&2
    return 1
fi

if [ "$source_script" != $expected_source_script ]
then
    printf "script \"$this_script\" should be sourced from \"$expected_source_script\", not \"$source_script\"\n" 1>&2
    exit 1
fi

#-----------------------------------------------------------------------------

xilinx_setup_vivado ()
{
    if is_command_available vivado ; then
        return  # Already set up
    fi

       [ "$OSTYPE" = "linux-gnu" ]  \
    || [ "$OSTYPE" = "cygwin"    ]  \
    || [ "$OSTYPE" = "msys"      ]  \
    || return

    vivado_install_dir=Xilinx/Vivado

    #-------------------------------------------------------------------------

    if    [ -n "${XILINX_HOME-}" ]  \
       && [ -d "$XILINX_HOME/$vivado_install_dir" ]
    then
        vivado_install_parent_dir="$XILINX_HOME"
    fi

    #-------------------------------------------------------------------------

    if [ "$OSTYPE" = "linux-gnu" ]
    then
        if [ -z "${vivado_install_parent_dir-}" ]
        then
            vivado_install_parent_dir="$HOME"
        fi

        if ! [ -d "$vivado_install_parent_dir/$vivado_install_dir" ]
        then
            vivado_install_parent_dir_first="$vivado_install_parent_dir"
            vivado_install_parent_dir=/opt
        fi

        if ! [ -d "$vivado_install_parent_dir/$vivado_install_dir" ]
        then
            vivado_install_parent_dir_second="$vivado_install_parent_dir"
            vivado_install_parent_dir=/tools
        fi

    elif  [ "$OSTYPE" = "cygwin"    ]  \
       || [ "$OSTYPE" = "msys"      ]
    then
        if [ -z "${vivado_install_parent_dir-}" ]
        then
            vivado_install_parent_dir=/c
        fi

        if ! [ -d "$vivado_install_parent_dir/$vivado_install_dir" ]
        then
            vivado_install_parent_dir_first="$vivado_install_parent_dir"
            vivado_install_parent_dir=/d
        fi

        if ! [ -d "$vivado_install_parent_dir/$vivado_install_dir" ]
        then
            vivado_install_parent_dir_second="$vivado_install_parent_dir"
            vivado_install_parent_dir=/e
        fi
    else
        error "this script does not support your OS / platform '$OSTYPE'"
    fi

    #-------------------------------------------------------------------------

    if ! [ -d "$vivado_install_parent_dir/$vivado_install_dir" ]
    then
        if [ -z "${vivado_install_parent_dir_first-}" ]
        then
            error "expected to find '$vivado_install_dir' directory"  \
                  "in '$vivado_install_parent_dir'."                  \
                  "'$vivado_install_dir' location can be set by the environment variable XILINX_HOME"

        elif [ -z "${vivado_install_parent_dir_second-}" ]
        then
            error "expected to find '$vivado_install_dir' directory"  \
                  "either in '$vivado_install_parent_dir_first'"      \
                  "or in '$vivado_install_parent_dir'."               \
                  "'$vivado_install_dir' location can be set by the environment variable XILINX_HOME"
        else
            error "expected to find '$vivado_install_dir' directory"  \
                  "either in '$vivado_install_parent_dir_first'"      \
                  "or in '$vivado_install_parent_dir_second'"         \
                  "or in '$vivado_install_parent_dir'."               \
                  "'$vivado_install_dir' location can be set by the environment variable XILINX_HOME"
        fi
    fi

    #-------------------------------------------------------------------------

    find_command="$find_to_run $vivado_install_parent_dir/$vivado_install_dir -mindepth 1 -maxdepth 1 -type d -print"
    first_version_dir=$($find_command -quit)

    if [ -z "$first_version_dir" ]
    then
        error "cannot find any version of Intel FPGA installed in "  \
              "'$vivado_install_parent_dir/$vivado_install_dir'"
    fi

    #-------------------------------------------------------------------------

    export XILINX_VIVADO="$first_version_dir"
    export PATH="${PATH:+$PATH:}$XILINX_VIVADO/bin"

    #-------------------------------------------------------------------------

    all_version_dirs=$($find_command | xargs echo)

    if [ "$first_version_dir" != "$all_version_dirs" ]
    then
        warning 1 "multiple Intel FPGA versions installed in"  \
                "'$vivado_install_parent_dir/$vivado_install_dir':"  \
                "'$all_version_dirs'"

        info "XILINX_VIVADO=$XILINX_VIVADO"
        info "PATH=$PATH"
    fi
}

#-----------------------------------------------------------------------------

setup_run_directory_for_fpga_synthesis_xilinx ()
{
    dir="$1"
    main_src_dir="$2"

    > "$dir/fpga_project_synthesize.tcl"

    cat "$board_dir/$fpga_board/board_specific.tcl"  \
      >> "$dir/fpga_project_synthesize.tcl"

    > "$dir/fpga_project_configure.tcl"

    cat "$board_dir/$fpga_board/board_specific.tcl"  \
      >> "$dir/fpga_project_configure.tcl"
}

#-----------------------------------------------------------------------------

synthesize_for_fpga_xilinx ()
{
    is_command_available_or_error vivado " from Xilinx package"
    vivado -source fpga_project_synthesize.tcl
}

#-----------------------------------------------------------------------------

configure_fpga_xilinx ()
{
    is_command_available_or_error vivado " from Xilinx package"
    vivado -source fpga_project_configure.tcl
}
