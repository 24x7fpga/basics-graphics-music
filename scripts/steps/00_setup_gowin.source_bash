expected_source_script=00_setup.source_bash

if [ -z "$BASH_SOURCE" ]
then
    printf "script \"$0\" should be sourced from $expected_source_script\n" 1>&2
    exit 1
fi

this_script=$(basename "${BASH_SOURCE[0]}")
source_script=$(basename "${BASH_SOURCE[1]}")

if [ -z "$source_script" ]
then
    printf "script \"$this_script\" should be sourced from $expected_source_script\n" 1>&2
    return 1
fi

if [ "$source_script" != $expected_source_script ]
then
    printf "script \"$this_script\" should be sourced from \"$expected_source_script\", not \"$source_script\"\n" 1>&2
    exit 1
fi

#-----------------------------------------------------------------------------

gowin_setup_ide ()
{
    if is_command_available gw_sh &&
       ( is_command_available openFPGALoader &&   [ "$OSTYPE" = "linux-gnu" ] ||
         is_command_available programmer_cli && ( [ "$OSTYPE" = "cygwin"    ] ||
                                                  [ "$OSTYPE" = "msys"      ] ) ) ; then
        gowin_sh="gw_sh"
        gowin_pr="programmer_cli"
        return  # Already set up
    fi

       [ "$OSTYPE" = "linux-gnu" ]  \
    || [ "$OSTYPE" = "cygwin"    ]  \
    || [ "$OSTYPE" = "msys"      ]  \
    || return

    # Consider changing priorities of /opt and $HOME

    if [ "$OSTYPE" = "linux-gnu" ]
    then
        gowin_ide_setup_dir=/opt/gowin

        if ! [ -d $gowin_ide_setup_dir ]
        then
            gowin_ide_setup_dir="$HOME/gowin"

            if ! [ -d "$gowin_ide_setup_dir" ]
            then
                error "Gowin IDE not found in /opt/gowin or \"$HOME/gowin\" \n You can download Gowin EDA here: https://www.gowinsemi.com/en/support/download_eda/"
            fi
        fi

        gowin_sh="$gowin_ide_setup_dir/IDE/bin/gw_sh"
        return

    elif  [ "$OSTYPE" = "cygwin"    ]  \
       || [ "$OSTYPE" = "msys"      ]
    then
        if    [ -n "${GOWIN_HOME-}" ]  \
           && [ -d "$GOWIN_HOME/IDE" ] \
           && [ -d "$GOWIN_HOME/Programmer" ]
        then
            gowin_sh="$GOWIN_HOME/IDE/bin/gw_sh"
            gowin_pr="$GOWIN_HOME/Programmer/bin/programmer_cli"
            return
        fi

        gowinfpga_install_dir="/c/Gowin"

    else
        error "this script does not support your OS / platform '$OSTYPE'"
    fi

    #-------------------------------------------------------------------------

    if ! [ -d "$gowinfpga_install_dir" ]
    then
        error "expected to find '$gowinfpga_install_dir' directory"  \
              "'$gowinfpga_install_dir' location may be set by the environment variable GOWIN_HOME"
    fi

    #-------------------------------------------------------------------------

    find_command="$find_to_run $gowinfpga_install_dir -mindepth 1 -maxdepth 1 -type d -print"
    first_version_dir=$($find_command | sort | tail -1)

    if [ -z "$first_version_dir" ]
    then
        error "cannot find any version of Gowin EDA installed in "  \
              "'$gowinfpga_install_dir'"
    fi

    #-------------------------------------------------------------------------

    export GOWIN_HOME="$first_version_dir"
    export PATH="${PATH:+$PATH:}$GOWIN_HOME/IDE/bin:$GOWIN_HOME/Programmer/bin"
    gowin_sh="$GOWIN_HOME/IDE/bin/gw_sh"
    gowin_pr="$GOWIN_HOME/Programmer/bin/programmer_cli"

    #-------------------------------------------------------------------------

    all_version_dirs=$($find_command | xargs echo)

    if [ "$first_version_dir" != "$all_version_dirs" ]
    then
        warning 1 "multiple Gowin EDA versions installed in"  \
                "'$gowinfpga_install_dir':"  \
                "'$all_version_dirs'"

        info "GOWIN_HOME=$GOWIN_HOME"
        info "PATH=$PATH"
    fi

    #-------------------------------------------------------------------------

                   [ -d "$GOWIN_HOME" ]  \
    || error "directory '$GOWIN_HOME' expected"

                   [ -d "$GOWIN_HOME/IDE/bin" ]  \
    || error "directory '$GOWIN_HOME/IDE/bin' expected"

                   [ -d "$GOWIN_HOME/Programmer/bin" ]  \
    || error "directory '$GOWIN_HOME/Programmer/bin' expected"

    #-------------------------------------------------------------------------

}

#-------------------------------------------------------------------------

setup_run_directory_for_fpga_synthesis_gowin ()
{
    dir="$1"
    main_src_dir="$2"

    > "$dir/fpga_project.tcl"
    cat "$board_dir/$fpga_board/board_specific.tcl" >> "$dir/fpga_project.tcl"

    for verilog_src_dir in  \
        "$main_src_dir"  \
        "$board_dir/$fpga_board"  \
        "$lab_dir/common"
    do
        $find_to_run  \
            "${verilog_src_dir/\/[[:alpha:]]\//${verilog_src_dir:1:1}:\/}"  \
            -type f -name '*.sv' -not -name tb.sv  \
            -printf "add_file -type verilog %p\n" \
            >> "$dir/fpga_project.tcl"
    done

    echo "add_file -type cst ${board_dir/\/[[:alpha:]]\//${board_dir:1:1}:\/}/$fpga_board/board_specific.cst" >> "$dir/fpga_project.tcl"
    echo "add_file -type sdc ${board_dir/\/[[:alpha:]]\//${board_dir:1:1}:\/}/$fpga_board/board_specific.sdc" >> "$dir/fpga_project.tcl"
    echo "run all" >> "$dir/fpga_project.tcl"
}

#-----------------------------------------------------------------------------

synthesize_for_fpga_gowin ()
{
    is_command_available_or_error "$gowin_sh" " from GoWin IDE package"
    "$gowin_sh" fpga_project.tcl
}

#-----------------------------------------------------------------------------
configure_fpga_gowin ()
{
    if [ "$OSTYPE" = "msys" ] ||
       [ "$OSTYPE" = "cygwin"    ]
    then
        configure_fpga_gowin_msys
    else
        configure_fpga_gowin_all
    fi
}

configure_fpga_gowin_msys ()
{
    is_command_available_or_error programmer_cli " tool programmer_cli is not installed on system\n You can download and install Gowin EDA https://www.gowinsemi.com/en/support/home/"

    case $fpga_board in

      # gowin_runber |
        tang_nano_1k )
            fpga_board_for_programmer="GW1NZ-1"
            flash_method="-r 5"                  ;;
        tang_nano_4k )
            fpga_board_for_programmer="GW1NSR-4C"
            flash_method="-r 5"                  ;;
        tang_nano_9k )
            fpga_board_for_programmer="GW1NR-9C"
            flash_method="-r 5"                  ;;
        tang_nano_20k | \
        tang_primer_20k_dock | \
        tang_primer_20k_lite )
            fpga_board_for_programmer="GW2A-18C"
            flash_method="-r 36"                 ;;

        *)
            error "FPGA board $fpga_board is not supported by the script running openFPGALoader"
            ;;
    esac

    #-------------------------------------------------------------------------

    read -n 1 -r -p "Would you like to choose a flash method ? S-SRAM E-Embedded Flash [s/E] "
    printf "\n"

    if [[ "$REPLY" =~ ^[Ss]$ ]] ; then
        flash_method="-r 2"
    fi


    prj_parent_dir=`pwd`
    $gowin_pr -d $fpga_board_for_programmer $flash_method --fsFile ${prj_parent_dir/\/[[:alpha:]]\//${prj_parent_dir:1:1}:\/}/impl/pnr/fpga_project.fs
}

configure_fpga_gowin_all ()
{
    is_command_available_or_error openFPGALoader " tool openFPGALoader is not installed on system\n You can download openFPGALoader here: https://trabucayre.github.io/openFPGALoader/guide/install.html"

    #-------------------------------------------------------------------------

    if [ "$OSTYPE" = "linux-gnu" ]
    then
        rules_dir=/etc/udev/rules.d
        rules_file="$script_dir/fpga/91-sipeed.rules"

        if ! grep -q 'ATTRS{idVendor}=="0403", ATTRS{idProduct}=="6010"' $rules_dir/*
        then
            error "No rules for Sipeed FPGA loader detected in $rules_dir."  \
                  "Please put it there and reboot: sudo cp $rules_file $rules_dir"
        fi

        killall jtagd 2>/dev/null || true
    fi

    #-------------------------------------------------------------------------

    case $fpga_board in

      # gowin_runber         ) fpga_board_for_openFPGALoader=runber        ;;
        tang_nano_1k         ) fpga_board_for_openFPGALoader=tangnano1k    ;;
        tang_nano_20k        ) fpga_board_for_openFPGALoader=tangnano20k   ;;
        tang_nano_4k         ) fpga_board_for_openFPGALoader=tangnano4k    ;;
        tang_nano_9k         ) fpga_board_for_openFPGALoader=tangnano9k    ;;
        tang_primer_20k_dock ) fpga_board_for_openFPGALoader=tangprimer20k ;;
        tang_primer_20k_lite ) fpga_board_for_openFPGALoader=tangprimer20k ;;

        *)
            error "FPGA board $fpga_board is not supported by the script running openFPGALoader"
            ;;
    esac

    #-------------------------------------------------------------------------

    openFPGALoader -b $fpga_board_for_openFPGALoader impl/pnr/fpga_project.fs
}
